{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../../../test/common/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  isWrapped,\n  safeExecuteInTheMiddle,\n  safeExecuteInTheMiddleAsync,\n} from '../../src';\n\ndescribe('isWrapped', () => {\n  describe('when function is wrapped', () => {\n    it('should return true', () => {\n      const obj: any = {\n        wrapMe: function () {},\n      };\n      obj.wrapMe.__original = function () {};\n      obj.wrapMe.__unwrap = function () {};\n      obj.wrapMe.__wrapped = true;\n\n      assert.deepStrictEqual(isWrapped(obj.wrapMe), true);\n    });\n  });\n  describe('when function is NOT wrapped', () => {\n    it('should return false', () => {\n      const obj: any = {\n        wrapMe: function () {},\n      };\n      obj.wrapMe.__unwrap = function () {};\n      obj.wrapMe.__wrapped = true;\n\n      assert.deepStrictEqual(isWrapped(obj.wrapMe), false);\n    });\n  });\n});\n\ndescribe('safeExecuteInTheMiddle', () => {\n  it('should not throw error', () => {\n    safeExecuteInTheMiddle(\n      () => {\n        return 'foo';\n      },\n      err => {\n        assert.deepStrictEqual(err, undefined);\n      },\n      true\n    );\n  });\n  it('should throw error', () => {\n    const error = new Error('test');\n    try {\n      safeExecuteInTheMiddle(\n        () => {\n          throw error;\n        },\n        err => {\n          assert.deepStrictEqual(error, err);\n        }\n      );\n    } catch (err) {\n      assert.deepStrictEqual(error, err);\n    }\n  });\n  it('should return result', () => {\n    const result = safeExecuteInTheMiddle(\n      () => {\n        return 1;\n      },\n      (err, result) => {\n        assert.deepStrictEqual(err, undefined);\n        assert.deepStrictEqual(result, 1);\n      }\n    );\n    assert.deepStrictEqual(result, 1);\n  });\n});\n\ndescribe('safeExecuteInTheMiddleAsync', () => {\n  it('should not throw error', () => {\n    safeExecuteInTheMiddleAsync(\n      async () => {\n        await setTimeout(() => {}, 1);\n        return 'foo';\n      },\n      err => {\n        assert.deepStrictEqual(err, undefined);\n      },\n      true\n    );\n  });\n  it('should throw error', async () => {\n    const error = new Error('test');\n    try {\n      await safeExecuteInTheMiddleAsync(\n        async () => {\n          await setTimeout(() => {}, 1);\n          throw error;\n        },\n        err => {\n          assert.deepStrictEqual(error, err);\n        }\n      );\n    } catch (err) {\n      assert.deepStrictEqual(error, err);\n    }\n  });\n  it('should return result', async () => {\n    const result = await safeExecuteInTheMiddleAsync(\n      async () => {\n        await setTimeout(() => {}, 1);\n        return 1;\n      },\n      (err, result) => {\n        assert.deepStrictEqual(err, undefined);\n        assert.deepStrictEqual(result, 1);\n      }\n    );\n    assert.deepStrictEqual(result, 1);\n  });\n});\n"]}