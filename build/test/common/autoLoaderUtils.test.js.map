{"version":3,"file":"autoLoaderUtils.test.js","sourceRoot":"","sources":["../../../test/common/autoLoaderUtils.test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,mCAAgD;AAChD,+DAAwE;AAExE,MAAM,kBAAmB,SAAQ,yBAAmB;IAClD;QACE,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IACxB,CAAC;IAED,IAAI;QACF,OAAO,EAAE,CAAC;IACZ,CAAC;IAEQ,MAAM,KAAI,CAAC;IAEX,OAAO,KAAI,CAAC;CACtB;AAED,uDAAuD;AAEvD,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,6CAA2B,EAAC;gBACvD,kBAAkB;aACnB,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,eAAe,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,EAAE,CAAC,eAAe,YAAY,yBAAmB,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,6CAA2B,EAAC;gBACvD,IAAI,kBAAkB,EAAE;aACzB,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,eAAe,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,EAAE,CAAC,eAAe,YAAY,yBAAmB,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { InstrumentationBase } from '../../src';\nimport { parseInstrumentationOptions } from '../../src/autoLoaderUtils';\n\nclass FooInstrumentation extends InstrumentationBase {\n  constructor() {\n    super('foo', '1', {});\n  }\n\n  init() {\n    return [];\n  }\n\n  override enable() {}\n\n  override disable() {}\n}\n\n// const fooInstrumentation = new FooInstrumentation();\n\ndescribe('autoLoaderUtils', () => {\n  describe('parseInstrumentationOptions', () => {\n    it('should create a new instrumentation from class', () => {\n      const { instrumentations } = parseInstrumentationOptions([\n        FooInstrumentation,\n      ]);\n      assert.strictEqual(instrumentations.length, 1);\n      const instrumentation = instrumentations[0];\n      assert.ok(instrumentation instanceof InstrumentationBase);\n    });\n\n    it('should return an instrumentation from Instrumentation', () => {\n      const { instrumentations } = parseInstrumentationOptions([\n        new FooInstrumentation(),\n      ]);\n      assert.strictEqual(instrumentations.length, 1);\n      const instrumentation = instrumentations[0];\n      assert.ok(instrumentation instanceof InstrumentationBase);\n    });\n  });\n});\n"]}