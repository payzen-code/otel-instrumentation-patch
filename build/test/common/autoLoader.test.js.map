{"version":3,"file":"autoLoader.test.js","sourceRoot":"","sources":["../../../test/common/autoLoader.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Tracer,\n  TracerProvider,\n  Meter,\n  MeterOptions,\n  MeterProvider,\n} from '@opentelemetry/api';\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { InstrumentationBase, registerInstrumentations } from '../../src';\n\nclass DummyTracerProvider implements TracerProvider {\n  getTracer(name: string, version?: string): Tracer {\n    throw new Error('not implemented');\n  }\n}\n\nclass DummyMeterProvider implements MeterProvider {\n  getMeter(name: string, version?: string, options?: MeterOptions): Meter {\n    throw new Error('not implemented');\n  }\n}\n\nclass FooInstrumentation extends InstrumentationBase {\n  init() {\n    return [];\n  }\n  override enable() {}\n  override disable() {}\n}\n\ndescribe('autoLoader', () => {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  let unload: Function | undefined;\n\n  afterEach(() => {\n    sinon.restore();\n    if (typeof unload === 'function') {\n      unload();\n      unload = undefined;\n    }\n  });\n\n  describe('registerInstrumentations', () => {\n    describe('InstrumentationBase', () => {\n      let instrumentation: InstrumentationBase;\n      let enableSpy: sinon.SinonSpy;\n      let setTracerProviderSpy: sinon.SinonSpy;\n      let setMeterProviderSpy: sinon.SinonSpy;\n      const tracerProvider = new DummyTracerProvider();\n      const meterProvider = new DummyMeterProvider();\n      beforeEach(() => {\n        instrumentation = new FooInstrumentation('foo', '1', {});\n        enableSpy = sinon.spy(instrumentation, 'enable');\n        setTracerProviderSpy = sinon.stub(instrumentation, 'setTracerProvider');\n        setMeterProviderSpy = sinon.stub(instrumentation, 'setMeterProvider');\n        unload = registerInstrumentations({\n          instrumentations: [instrumentation],\n          tracerProvider,\n          meterProvider,\n        });\n      });\n\n      afterEach(() => {\n        Object.keys(require.cache).forEach(key => delete require.cache[key]);\n        if (typeof unload === 'function') {\n          unload();\n          unload = undefined;\n        }\n      });\n\n      it('should enable disabled instrumentation', () => {\n        if (typeof unload === 'function') {\n          unload();\n          unload = undefined;\n        }\n        instrumentation = new FooInstrumentation(\n          'foo',\n          '1',\n          { enabled: false }\n        );\n        enableSpy = sinon.spy(instrumentation, 'enable');\n        setTracerProviderSpy = sinon.stub(instrumentation, 'setTracerProvider');\n        setMeterProviderSpy = sinon.stub(instrumentation, 'setMeterProvider');\n        unload = registerInstrumentations({\n          instrumentations: [instrumentation],\n          tracerProvider,\n          meterProvider,\n        });\n        assert.strictEqual(enableSpy.callCount, 1);\n      });\n\n      it('should NOT enable enabled instrumentation', () => {\n        assert.strictEqual(enableSpy.callCount, 0);\n      });\n\n      it('should set TracerProvider', () => {\n        assert.strictEqual(setTracerProviderSpy.callCount, 1);\n        assert.ok(setTracerProviderSpy.lastCall.args[0] === tracerProvider);\n        assert.strictEqual(setTracerProviderSpy.lastCall.args.length, 1);\n      });\n\n      it('should set MeterProvider', () => {\n        assert.strictEqual(setMeterProviderSpy.callCount, 1);\n        assert.ok(setMeterProviderSpy.lastCall.args[0] === meterProvider);\n        assert.strictEqual(setMeterProviderSpy.lastCall.args.length, 1);\n      });\n    });\n  });\n});\n"]}