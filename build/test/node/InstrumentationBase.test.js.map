{"version":3,"file":"InstrumentationBase.test.js","sourceRoot":"","sources":["../../../test/node/InstrumentationBase.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport * as path from 'path';\nimport {\n  InstrumentationBase,\n  InstrumentationModuleDefinition,\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n} from '../../src';\n\nconst MODULE_NAME = 'test-module';\nconst MODULE_FILE_NAME = 'test-module-file';\nconst MODULE_VERSION = '0.1.0';\nconst WILDCARD_VERSION = '*';\nconst MODULE_DIR = '/random/dir';\nconst CORE_MODULE = 'random_core';\n\nclass TestInstrumentation extends InstrumentationBase {\n  constructor() {\n    super(MODULE_NAME, MODULE_VERSION);\n  }\n\n  init() {}\n}\n\ndescribe('InstrumentationBase', () => {\n  describe('_onRequire - core module', () => {\n    let instrumentation: TestInstrumentation;\n    let modulePatchSpy: sinon.SinonSpy;\n    beforeEach(() => {\n      instrumentation = new TestInstrumentation();\n      modulePatchSpy = sinon.spy();\n    });\n\n    describe('AND module is not enabled', () => {\n      it('should not patch the module', () => {\n        // @ts-expect-error access internal property for testing\n        instrumentation._enabled = false;\n        const moduleExports = {};\n        const instrumentationModule = {\n          name: CORE_MODULE,\n          patch: modulePatchSpy as unknown,\n        } as InstrumentationModuleDefinition<unknown>;\n\n        // @ts-expect-error access internal property for testing\n        instrumentation._onRequire<unknown>(\n          instrumentationModule,\n          moduleExports,\n          CORE_MODULE,\n          undefined\n        );\n\n        assert.strictEqual(instrumentationModule.moduleExports, moduleExports);\n        sinon.assert.notCalled(modulePatchSpy);\n      });\n    });\n\n    describe('AND module is enabled', () => {\n      it('should patch the module', () => {\n        // @ts-expect-error access internal property for testing\n        instrumentation._enabled = true;\n        const moduleExports = {};\n        const instrumentationModule = {\n          name: CORE_MODULE,\n          patch: modulePatchSpy as unknown,\n        } as InstrumentationModuleDefinition<unknown>;\n\n        // @ts-expect-error access internal property for testing\n        instrumentation._onRequire<unknown>(\n          instrumentationModule,\n          moduleExports,\n          CORE_MODULE,\n          undefined\n        );\n\n        assert.strictEqual(instrumentationModule.moduleExports, moduleExports);\n        sinon.assert.calledOnceWithExactly(modulePatchSpy, moduleExports);\n      });\n    });\n  });\n\n  describe('_onRequire - module version is not available', () => {\n    // For all of these cases, there is no indication of the actual module version,\n    // so we require there to be a wildcard supported version.\n\n    let instrumentation: TestInstrumentation;\n    let modulePatchSpy: sinon.SinonSpy;\n\n    beforeEach(() => {\n      instrumentation = new TestInstrumentation();\n      // @ts-expect-error access internal property for testing\n      instrumentation._enabled = true;\n      modulePatchSpy = sinon.spy();\n    });\n\n    describe('when patching a module', () => {\n      describe('AND there is no wildcard supported version', () => {\n        it('should not patch module', () => {\n          const moduleExports = {};\n          const instrumentationModule = {\n            supportedVersions: [`^${MODULE_VERSION}`],\n            name: MODULE_NAME,\n            patch: modulePatchSpy as unknown,\n          } as InstrumentationModuleDefinition<unknown>;\n\n          // @ts-expect-error access internal property for testing\n          instrumentation._onRequire<unknown>(\n            instrumentationModule,\n            moduleExports,\n            MODULE_NAME,\n            MODULE_DIR\n          );\n\n          assert.strictEqual(instrumentationModule.moduleVersion, undefined);\n          assert.strictEqual(instrumentationModule.moduleExports, undefined);\n          sinon.assert.notCalled(modulePatchSpy);\n        });\n      });\n\n      describe('AND there is a wildcard supported version', () => {\n        it('should patch module', () => {\n          const moduleExports = {};\n          const instrumentationModule = {\n            supportedVersions: [`^${MODULE_VERSION}`, WILDCARD_VERSION],\n            name: MODULE_NAME,\n            patch: modulePatchSpy as unknown,\n          } as InstrumentationModuleDefinition<unknown>;\n\n          // @ts-expect-error access internal property for testing\n          instrumentation._onRequire<unknown>(\n            instrumentationModule,\n            moduleExports,\n            MODULE_NAME,\n            MODULE_DIR\n          );\n\n          assert.strictEqual(instrumentationModule.moduleVersion, undefined);\n          assert.strictEqual(\n            instrumentationModule.moduleExports,\n            moduleExports\n          );\n          sinon.assert.calledOnceWithExactly(\n            modulePatchSpy,\n            moduleExports,\n            undefined\n          );\n        });\n      });\n    });\n\n    describe('when patching module files', () => {\n      let filePatchSpy: sinon.SinonSpy;\n\n      beforeEach(() => {\n        filePatchSpy = sinon.stub().callsFake(exports => exports);\n      });\n\n      describe('AND there is no wildcard supported version', () => {\n        it('should not patch module file', () => {\n          const moduleExports = {};\n          const supportedVersions = [`^${MODULE_VERSION}`];\n          const instrumentationModule = {\n            supportedVersions,\n            name: MODULE_NAME,\n            patch: modulePatchSpy as unknown,\n            files: [\n              {\n                name: MODULE_FILE_NAME,\n                supportedVersions,\n                patch: filePatchSpy as unknown,\n              },\n            ],\n          } as InstrumentationModuleDefinition<unknown>;\n\n          // @ts-expect-error access internal property for testing\n          instrumentation._onRequire<unknown>(\n            instrumentationModule,\n            moduleExports,\n            MODULE_FILE_NAME,\n            MODULE_DIR\n          );\n\n          assert.strictEqual(instrumentationModule.moduleVersion, undefined);\n          assert.strictEqual(instrumentationModule.moduleExports, undefined);\n          sinon.assert.notCalled(modulePatchSpy);\n          sinon.assert.notCalled(filePatchSpy);\n        });\n      });\n\n      describe('AND there is a wildcard supported version', () => {\n        it('should patch module file', () => {\n          const moduleExports = {};\n          const supportedVersions = [`^${MODULE_VERSION}`, WILDCARD_VERSION];\n          const instrumentationModule = {\n            supportedVersions,\n            name: MODULE_NAME,\n            patch: modulePatchSpy as unknown,\n            files: [\n              {\n                name: MODULE_FILE_NAME,\n                supportedVersions,\n                patch: filePatchSpy as unknown,\n              },\n            ],\n          } as InstrumentationModuleDefinition<unknown>;\n\n          // @ts-expect-error access internal property for testing\n          instrumentation._onRequire<unknown>(\n            instrumentationModule,\n            moduleExports,\n            MODULE_FILE_NAME,\n            MODULE_DIR\n          );\n\n          assert.strictEqual(instrumentationModule.moduleVersion, undefined);\n          assert.strictEqual(\n            instrumentationModule.files[0].moduleExports,\n            moduleExports\n          );\n          sinon.assert.notCalled(modulePatchSpy);\n          sinon.assert.calledOnceWithExactly(\n            filePatchSpy,\n            moduleExports,\n            undefined\n          );\n        });\n      });\n\n      describe('AND there is multiple patches for the same file', () => {\n        it('should patch the same file twice', () => {\n          const moduleExports = {};\n          const supportedVersions = [`^${MODULE_VERSION}`, WILDCARD_VERSION];\n          const instrumentationModule = {\n            supportedVersions,\n            name: MODULE_NAME,\n            patch: modulePatchSpy as unknown,\n            files: [\n              {\n                name: MODULE_FILE_NAME,\n                supportedVersions,\n                patch: filePatchSpy as unknown,\n              },\n              {\n                name: MODULE_FILE_NAME,\n                supportedVersions,\n                patch: filePatchSpy as unknown,\n              },\n            ],\n          } as InstrumentationModuleDefinition<unknown>;\n\n          // @ts-expect-error access internal property for testing\n          instrumentation._onRequire<unknown>(\n            instrumentationModule,\n            moduleExports,\n            MODULE_FILE_NAME,\n            MODULE_DIR\n          );\n\n          assert.strictEqual(instrumentationModule.moduleVersion, undefined);\n          assert.strictEqual(\n            instrumentationModule.files[0].moduleExports,\n            moduleExports\n          );\n          assert.strictEqual(\n            instrumentationModule.files[1].moduleExports,\n            moduleExports\n          );\n          sinon.assert.notCalled(modulePatchSpy);\n          sinon.assert.calledTwice(filePatchSpy);\n        });\n      });\n    });\n  });\n\n  describe('enable/disable', () => {\n    describe('AND a normal module name', () => {\n      type Exports = Record<string, unknown>;\n      type ExportsPatched = Exports & { __patched?: boolean };\n      const moduleName = 'net';\n      class TestInstrumentation extends InstrumentationBase<Exports> {\n        constructor() {\n          super('@opentelemetry/instrumentation-net-test', '0.0.0', {\n            enabled: false,\n          });\n        }\n        init(): InstrumentationNodeModuleDefinition<Exports>[] {\n          return [\n            new InstrumentationNodeModuleDefinition<Exports>(\n              moduleName,\n              ['*'],\n              (exports: ExportsPatched) => {\n                exports.__patched = true;\n                return exports;\n              },\n              (exports: ExportsPatched) => {\n                exports.__patched = false;\n                return exports;\n              }\n            ),\n          ];\n        }\n      }\n\n      const instrumentation = new TestInstrumentation();\n\n      it('should patch the module', () => {\n        instrumentation.enable();\n        const exportsPatched = require(moduleName);\n        assert.equal(exportsPatched.__patched, true, 'after enable');\n        instrumentation.disable();\n        assert.equal(exportsPatched.__patched, false, 'after disable');\n        instrumentation.enable();\n        assert.equal(exportsPatched.__patched, true, 'after re-enable');\n      });\n    });\n\n    describe('AND an absolute path module name', () => {\n      type Exports = Record<string, unknown>;\n      type ExportsPatched = Exports & { __patched?: boolean };\n      const moduleName = 'absolutePathTestFixture';\n      const fileName = path.join(__dirname, 'fixtures', `${moduleName}.js`);\n      class TestInstrumentation extends InstrumentationBase<Exports> {\n        constructor() {\n          super('@opentelemetry/instrumentation-absolute-path-test', '0.0.0', {\n            enabled: false,\n          });\n        }\n        init(): InstrumentationNodeModuleDefinition<Exports>[] {\n          return [\n            new InstrumentationNodeModuleDefinition<Exports>(\n              fileName,\n              ['*'],\n              undefined,\n              undefined,\n              [\n                new InstrumentationNodeModuleFile(\n                  moduleName,\n                  ['*'],\n                  (exports: ExportsPatched) => {\n                    exports.__patched = true;\n                    return exports;\n                  },\n                  (exports?: ExportsPatched) => {\n                    if (exports) exports.__patched = false;\n                    return exports;\n                  }\n                ),\n              ]\n            ),\n          ];\n        }\n      }\n\n      const instrumentation = new TestInstrumentation();\n\n      it('should patch the module', () => {\n        instrumentation.enable();\n        const exportsPatched = require(fileName);\n        assert.equal(exportsPatched.__patched, true, 'after enable');\n        instrumentation.disable();\n        assert.equal(exportsPatched.__patched, false, 'after disable');\n        instrumentation.enable();\n        assert.equal(exportsPatched.__patched, true, 'after re-enable');\n      });\n    });\n  });\n});\n"]}